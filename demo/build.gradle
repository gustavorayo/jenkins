apply plugin: 'groovy'

sourceSets {
	main {
		groovy {
			srcDirs 'seed'
		}
	}
}

repositories {
	jcenter()
	mavenCentral()
	maven { url 'https://repo.jenkins-ci.org/releases/' }
	maven { url "https://repo.spring.io/libs-snapshot-local" }
	maven { url "https://repo.spring.io/libs-milestone-local" }
	maven { url "https://repo.spring.io/libs-release-local" }
}

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.4.7'
	compile "org.jenkins-ci.plugins:job-dsl-core:${jenkinsJobDslVersion}"
	compile "org.jenkins-ci.plugins:job-dsl:${jenkinsJobDslVersion}@jar"

	// for init.groovy
	compile 'org.jenkins-ci.plugins:credentials:2.1.13@jar'
	compile 'org.jenkins-ci.plugins:ssh-credentials:1.13@jar'
	compile 'org.jenkins-ci.plugins:groovy:1.30@jar'
	compile 'org.jenkins-ci.main:jenkins-core:2.19.1'
	// for Intellij not to throw exceptions
	compile 'javax.servlet:servlet-api:2.4'

	testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
		exclude module: 'groovy-all'
	}
}

// docker

ext {
	dockerImagePrefix = "cobrijani"
	dockerImageName = "${dockerImagePrefix}/${project.rootProject.name}"
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.*

docker {
	registryCredentials {
		url = getProp('DOCKER_REGISTRY_URL') ?: 'https://index.docker.io/v1/'
		username = getProp('DOCKER_HUB_USERNAME') ?: "changeme"
		password = getProp('DOCKER_HUB_PASSWORD') ?: "changeme"
		email = getProp('DOCKER_HUB_EMAIL') ?: "change@me.com"
	}
}

task buildImage(type: DockerBuildImage) {
	inputDir = project.projectDir
	tags = ["${dockerImageName}".toString()] as Set<String>
}

task tagImage(type: DockerTagImage) {
	dependsOn([buildImage])
	targetImageId { buildImage.getImageId() }
	repository = "${dockerImageName}"
	tag = project.version
}

task pushLatestImage(type: DockerPushImage) {
	dependsOn([tagImage])
	imageName = "${dockerImageName}"
	tag = "latest"
}

task pushConcreteImage(type: DockerPushImage) {
	dependsOn([tagImage])
	imageName = "${dockerImageName}"
	tag = project.version
}

task pushImages {
	enabled = project.hasProperty("releaseDocker")
	dependsOn([pushLatestImage, pushConcreteImage])
}

task removeImage(type: DockerRemoveImage) {
	dependsOn([tagImage, pushImages])
	targetImageId { buildImage.getImageId() }
	force(true)
}

test.dependsOn("tagImage")
if (project.hasProperty("releaseDocker")) build.dependsOn("removeImage")

String getProp(String propName) {
	return hasProperty(propName) ?
		(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
		System.getenv(propName)
}
